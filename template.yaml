AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template to update config recorder settings in child accounts created by ControlTower.'
Parameters:

  ExcludedAccounts:
    Description: Excluded Accounts list. This list should contain Management account, Log Archive and Audit accounts at the minimum
    Default: "['111111111111', '222222222222', '333333333333']"
    MaxLength: '2000'
    MinLength: '36'
    Type: String

  CloudFormationVersion:
    Type: String
    Default: 2

  LambdaBucketName:
    Type: String
  LambdaBucketArn:
    Type: String

  LambdaSourceObjectName:
    Type: String

Resources:
    ProducerLambda:
        Type: AWS::Lambda::Function
        # DependsOn: CopyZips
        Properties:
            #FunctionName: ct_configrecorder_override_producer_cf
            Code:
                S3Bucket: !Ref LambdaBucketName
                S3Key: !Ref LambdaSourceObjectName
            Handler: ct_configrecorder_override_producer.lambda_handler
            Role: !GetAtt ProducerLambdaExecutionRole.Arn
            Runtime: python3.10
            MemorySize: 128
            Timeout: 300
            Architectures:
                - x86_64
            ReservedConcurrentExecutions: 1
            Environment:
                Variables:
                    EXCLUDED_ACCOUNTS: !Ref ExcludedAccounts
                    LOG_LEVEL: INFO
                    SQS_URL: !Ref SQSConfigRecorder

    ProducerLambdaPermissions:                
      Type: AWS::Lambda::Permission
      Properties: 
        Action: 'lambda:InvokeFunction'
        FunctionName: !Ref ProducerLambda
        Principal: 'events.amazonaws.com'
        SourceArn: !GetAtt ProducerEventTrigger.Arn             
      
    ConsumerLambda:
        Type: AWS::Lambda::Function
        # DependsOn: CopyZips
        Properties:
            #FunctionName: ct_configrecorder_override_consumer_cf
            Code:
                S3Bucket: !Ref LambdaBucketName
                S3Key: !Ref LambdaSourceObjectName
            Handler: ct_configrecorder_override_consumer.lambda_handler
            Role: !GetAtt ConsumerLambdaExecutionRole.Arn
            Runtime: python3.10
            MemorySize: 128
            Timeout: 180
            Architectures:
                - x86_64
            ReservedConcurrentExecutions: 10
            Environment:
                Variables:
                    LOG_LEVEL: INFO

    ConsumerLambdaEventSourceMapping:
        Type: AWS::Lambda::EventSourceMapping
        Properties:
          BatchSize: 1
          Enabled: true
          EventSourceArn: !GetAtt SQSConfigRecorder.Arn
          FunctionName: !GetAtt ConsumerLambda.Arn                
    
    ProducerLambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        Properties:
          ManagedPolicyArns:
            - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /
          Policies:
            - PolicyName: ct_cro_producer
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - cloudformation:ListStackInstances
                    Resource: !Sub 'arn:${AWS::Partition}:cloudformation:*:*:stackset/AWSControlTowerBP-BASELINE-CONFIG:*'
                  - Effect: Allow
                    Action:
                      - sqs:DeleteMessage
                      - sqs:ReceiveMessage
                      - sqs:SendMessage
                      - sqs:GetQueueAttributes
                    Resource: !GetAtt SQSConfigRecorder.Arn  

    ConsumerLambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        Properties:
          ManagedPolicyArns:
            - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /
          Policies:
            - PolicyName: policy-sts-all
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - sqs:DeleteMessage
                      - sqs:ReceiveMessage
                      - sqs:SendMessage
                      - sqs:GetQueueAttributes
                    Resource: !GetAtt SQSConfigRecorder.Arn   

    SQSConfigRecorder:
        Type: AWS::SQS::Queue
        Properties:
            #QueueName: ct_configrecorder_override_cf
            VisibilityTimeout: 180
            DelaySeconds: 5
            KmsMasterKeyId: alias/aws/sqs

    ProducerEventTrigger:
        Type: AWS::Events::Rule
        Properties: 
          Description: "Rule to trigger config recorder override producer lambda"
          EventBusName: default
          EventPattern: '{
                          "source": ["aws.controltower"],
                          "detail-type": ["AWS Service Event via CloudTrail"],
                          "detail": {
                            "eventName": ["UpdateLandingZone", "CreateManagedAccount", "UpdateManagedAccount"]
                          }
                        }'
          Name: !GetAtt SQSConfigRecorder.QueueName #ct_configrecorder_override_cf
          State: ENABLED
          Targets: 
            - 
                Arn: 
                  Fn::GetAtt: 
                    - "ProducerLambda"
                    - "Arn"
                Id: "ProducerTarget"

    ProducerLambdaTrigger:
      Type: 'Custom::ExecuteLambda'
      Properties:
        ServiceToken: !GetAtt "ProducerLambda.Arn"
        FunctionName: !Ref ProducerLambda
        Version: !Ref CloudFormationVersion

    LambdaInvokePermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt ProducerLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: s3.amazonaws.com
        SourceAccount: !Ref 'AWS::AccountId'
        SourceArn: !Sub 'arn:aws:s3:::${LambdaBucketName}'

    LambdaIAMRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:GetBucketNotification'
                    - 's3:PutBucketNotification'
                  Resource: !Sub 'arn:aws:s3:::${LambdaBucketName}'
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: 'arn:aws:logs:*:*:*'


    CustomResourceLambdaFunction:
      Type: 'AWS::Lambda::Function'
      Properties:
        Handler: index.lambda_handler
        Role: !GetAtt LambdaIAMRole.Arn
        Code:
          ZipFile: |

              from __future__ import print_function
              import json
              import boto3
              import cfnresponse
              
              SUCCESS = "SUCCESS"
              FAILED = "FAILED"
              
              print('Loading function')
              s3 = boto3.resource('s3')
              
              def lambda_handler(event, context):
                  print("Received event: " + json.dumps(event, indent=2))
                  responseData={}
                  try:
                      if event['RequestType'] == 'Delete':
                          print("Request Type:",event['RequestType'])
                          Bucket=event['ResourceProperties']['Bucket']
                          delete_notification(Bucket)
                          print("Sending response to custom resource after Delete")
                      elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                          print("Request Type:",event['RequestType'])
                          LambdaArn=event['ResourceProperties']['LambdaArn']
                          Bucket=event['ResourceProperties']['Bucket']
                          add_notification(LambdaArn, Bucket)
                          responseData={'Bucket':Bucket}
                          print("Sending response to custom resource")
                      responseStatus = 'SUCCESS'
                  except Exception as e:
                      print('Failed to process:', e)
                      responseStatus = 'FAILED'
                      responseData = {'Failure': 'Something bad happened.'}
                  cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")

              def add_notification(LambdaArn, Bucket):
                  bucket_notification = s3.BucketNotification(Bucket)
                  response = bucket_notification.put(
                    NotificationConfiguration={
                      'LambdaFunctionConfigurations': [
                        {
                            'LambdaFunctionArn': LambdaArn,
                            'Events': [
                                's3:ObjectCreated:*'
                            ]
                        }
                      ]
                    }
                  )
                  print("Put request completed....")
                
              def delete_notification(Bucket):
                  bucket_notification = s3.BucketNotification(Bucket)
                  response = bucket_notification.put(
                      NotificationConfiguration={}
                  )
                  print("Delete request completed....")
        Runtime: python3.9
        Timeout: 50


    LambdaTrigger:
      Type: 'Custom::LambdaTrigger'
      DependsOn: LambdaInvokePermission
      Properties:
        ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
        LambdaArn: !GetAtt ProducerLambda.Arn
        Bucket: !Ref LambdaBucketName


    LambdaInvokePermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt ProducerLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: s3.amazonaws.com
        SourceAccount: !Ref 'AWS::AccountId'
        SourceArn: !Sub 'arn:aws:s3:::${LambdaBucketName}'

